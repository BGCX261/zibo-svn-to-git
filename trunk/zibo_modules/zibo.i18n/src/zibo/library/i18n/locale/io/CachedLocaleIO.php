<?php

namespace zibo\library\i18n\locale\io;

use zibo\library\filesystem\File;

/**
 * Cache decorator for another LocaleIO
 */
class CachedLocaleIO implements LocaleIO {

    /**
     * Path to the generated container
     * @var string
     */
    const FILE = 'application/data/cache/l10n/locales.php';

    /**
     * LocaleIO which is cached by this LocaleIO
     * @var zibo\library\i18n\locale\io\LocaleIO
     */
    private $io;

    /**
     * Constructs a new cached LocaleIO
     * @param LocaleIO $io the LocaleIO which needs a cache
     * @return null
     */
    public function __construct(LocaleIO $io) {
        $this->io = $io;
    }

    /**
     * Gets all available locales
     * @return array all Locale objects
     */
    public function getLocales() {
        $file = new File(self::FILE);
        if ($file->exists()) {
            require($file);
        }

    	if (isset($locales)) {
    		return $locales;
    	}

    	$locales = $this->io->getLocales();

    	$parent = $file->getParent();
    	$parent->create();

    	$php = $this->generatePhp($locales);

    	$file->write($php);

    	return $locales;
    }

    /**
	 * Generates a PHP source file for the provided dependency container
	 * @param array $locales Array with locales
	 * @return string
     */
    public static function generatePhp(array $locales) {
        $output = "<?php\n\n";
        $output .= "/*\n";
        $output .= " * This file is generated by zibo\library\i18n\locale\io\CachedLocaleIO.\n";
        $output .= " */\n";
        $output .= "\n";
        $output .= "use zibo\\library\\i18n\\locale\\Locale;\n";
        $output .= "\n";
        $output .= '$locales' . " = array();\n";
        $output .= "\n";

        foreach ($locales as $locale) {
            $output .= '$l = new Locale(';
            $output .= self::getArgumentValue($locale->getCode()) . ', ';
            $output .= self::getArgumentValue($locale->getName()) . ', ';
            $output .= self::getArgumentValue($locale->getPluralScript()) . ");\n";

            $dateFormats = $locale->getDateFormats();
            foreach ($dateFormats as $id => $format) {
                $output .= '$l->setDateFormat(';
                $output .= self::getArgumentValue($id) . ', ';
                $output .= self::getArgumentValue($format) . ");\n";
            }

            $output .= '$locales[' . self::getArgumentValue($locale->getCode()) . '] = $l;';
            $output .= "\n\n";
        }

        return $output;
    }

    /**
     * Gets the PHP syntax of the provided value
     * @param mixed $value
     * @return string
     */
    private static function getArgumentValue($value) {
        if ($value === null) {
            return 'null';
        }

        return "'" . $value . "'";
    }

}